<?xml version="1.0" encoding="UTF-8"?>

<project name="XXX" default="current-number">

	<property file="version.properties"/>
	
	<!-- Source -->
	<property name="src.dir" 			value="${basedir}/src"/>
	<property name="test.dir"   		value="${basedir}/test"/>
	
	<property name="dist.dir" 			value="${basedir}/dist"/>
	<property name="conf.dir" 			value="${basedir}/etc"/>
	<property name="doc.dir" 			value="${build.dir}/doc"/>
	<property name="test.reports.dir" 	value="${build.dir}/reports/"/>
	<property name="jar.dir" 			value="build/jar"/>
	
	<property name="main-class"  		value="ee.ut.math.tvt.XXX.Intro"/>
	<property name="lib.dir" 			value="${basedir}/lib"/>
	
	<!-- Build -->
	<property name="build.dir" 			value="${basedir}/build"/>
	<property name="build.number" 		value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
	<property name="build.test.dir"     value="${build.dir}/test"/>
	
	<!-- database variables -->
	<property name="db.driver" 			value="org.hsqldb.jdbcDriver"/>
	<property name="data" 				value="${basedir}/data"/>
	<property name="db.file" 			value="${data}/POSdb.script"/>
	<property name="db.data.file" 		value="${data}/POSdbData"/>
	<property name="db.alias" 			value="POS"/>
	<property name="db.url" 			value="jdbc:hsqldb:hsql://localhost/POS"/>
	<property name="lib.hibernate.dir" 	value="${lib.dir}/hibernate"/>
	
    <path id="compile.classpath">
    	<fileset dir="${lib.dir}">
    		<include name="*.jar"/>
    	</fileset>
    	
    	<fileset dir="${lib.hibernate.dir}">
    		<include name="*.jar"/>
    	</fileset>
    </path>
	
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
	
	<path id="run.classpath">
	        <pathelement location="${build.classes.dir}"/>
	        <!-- configuration -->
	        <pathelement location="${conf.dir}"/>
	        <fileset dir="${lib.dir}">
	            <include name="*.jar"/>
	        </fileset>

	        <fileset dir="${lib.hibernate.dir}">
	             <include name="*.jar"/>
	        </fileset>
	</path>
	
	<path id="test.classpath">
		<pathelement location="build/classes"/>
		<!-- configuration -->
		<pathelement location="${conf.dir}"/>
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	
	<!-- Program version number -->
	<target name="current-number" description="Shows program version number in console view">
	 <echo>Software version: ${build.number}</echo>
	</target>

	<target name="major" description="the first number of program version">
	    <propertyfile  file="version.properties">
	            <entry key="build.major.number" type="int" operation="+" value="1" pattern="0"/>
	            <entry key="build.minor.number" type="int" value="0" pattern="0"/>
	            <entry key="build.revision.number" type="int" value="0" pattern="0"/>
	    </propertyfile>
	</target>
	
	<target name="minor" description="the second number of program version">
	    <propertyfile  file="version.properties">
	            <entry key="build.minor.number" type="int" operation="+" value="1" pattern="0"/>
	            <entry key="build.revision.number" type="int" value="0" pattern="0"/>
	    </propertyfile>
	</target>
	
	<target name="revision" description="the third number of program version">
	    <propertyfile  file="version.properties">
	            <entry key="build.revision.number" type="int" operation="+" value="1" pattern="0"/>
	    </propertyfile>
	</target>

	<target name="all" description="changes all software version numbers +1">
	    <propertyfile  file="version.properties">
	            <entry key="build.major.number" type="int" operation="+" value="1" pattern="0"/>
	            <entry key="build.minor.number" type="int" operation="+" value="1" pattern="0"/>
	            <entry key="build.revision.number" type="int" operation="+" value="1" pattern="0"/>
	    </propertyfile>
	</target>

	<!-- Compiling source code -->
	<target name="compile" description="compiling the code">
		<!--><antcall target="revision"></antcall><-->
		<javac srcdir="src"/>
	</target>
	
    <target name="run" description="executes your application via class Intro">
        <java fork="true" classname="${main-class}">
            <classpath>
                <path refid="classpath"/>
                <path location="${build}/jar/XXX.jar"/>
            </classpath>
        </java>
    </target>
	<!-->classpathref="test.classpath"<-->
	
    <target name="dist" description="creates in the folder build/jar a separate JAR file" depends="revision">
        <mkdir dir="build/jar"/>
        <jar destfile="${jar.dir}/XXX.jar" basedir="build/classes.dir">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>

	<target name="jrun" description="opens your intro window using the JAR file created by your dist ANT target" depends="dist">
		<java jar="${jar.dir}/XXX.jar" fork="true"/>
	</target>
	
	<target name="build" description="Build the system">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${test.dir}"/>
		<mkdir dir="build/classes.dir"/>
		<mkdir dir="build/test.dir"/>
		<javac includeantruntime="false" 
			source="1.8" 
			target="1.8" 
			compiler="modern" 
			encoding="utf-8" 
			debuglevel="lines,vars,source" 
			debug="true" 
			destdir="build/classes.dir" 
			srcdir="${src.dir}">
			<classpath refid="compile.classpath"/>
		</javac>
	</target>
	
	<target name="clean" description="removing the files created during the previous build">
	   <delete dir="${build.dir}"/>
	</target>
	
	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<echo message="git @{command}" />
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args />
			</exec>
		</sequential>
	</macrodef>

	<target name="git_commit" description="commit and puh to GitHub server">
		<input message="Commit message" addproperty="message"> </input>
		<echo message="Committing... ${message}"/>
		<git command="add">
			<args>
				<arg value="${basedir.dir}" />
			</args>
		</git>
		<git command="commit">
			<args>
				<arg value="-am ${message}" />
			</args>
		</git>
		<input message="Enter user name:" addproperty="username"/>
		<input message="Enter password:" addproperty="password"/>
		<git command="push">
			<args>
				<arg value="https://${username}:${password}@github.com/${username}/XXX/"/>
			</args>
		</git>
	</target>
	
	<target name="git_tag" description="ask for a tag name and comment">
		<input message="Enter Tag name (homework_x):" addproperty="name"></input>
		<input message="Enter Tag comment (Homework x):" addproperty="comment"></input> 
		
		<echo message="Executing git tag -a ${name} -m '${comment}'" />
		
		<exec executable="git" failonerror="true">
		    <arg line="tag -a ${name} -m '${comment}'" />
		</exec>

		<git command="tag">
			<args>
				<arg value="-f"/>
					<arg value="${name}"/>
			</args>
		</git>
		<input message="Enter user name:" addproperty="username"/>
		<input message="Enter password:" addproperty="password"/>
		<git command="push">
			<args>
				<arg value="-f"/>
				<arg value="https://${username}:${password}@github.com/${username}/XXX/"/>
				<arg value="${name}"/>
			</args>
		</git>
	</target>
	

	<target name="startdb" description="Start the HSQLDB with the default params">
		<java classname="org.hsqldb.Server" fork="yes" classpathref="run.classpath">
			<arg line="-database.0 '${basedir}/data/POSdb.script' -dbname.0 '${db.alias}'"/>
		</java>
		<sql onerror="continue" src="${basedir}/data/POSdbData.script" password="" userid="sa" url="${db.url}" driver="${db.driver}">
			<classpath refid="run.classpath"/>
		</sql>
		<sql onerror="continue" src="data/POSdbSoldItemData.script" password="" userid="sa" url="${db.url}" driver="${db.driver}">
			<classpath refid="run.classpath"/>
		</sql>
	</target>
	
	<target name="dbmanager" description="Start the HSQLDB manager">
		<java classname="org.hsqldb.util.DatabaseManagerSwing" fork="yes" classpathref="run.classpath">
			<arg line="--user sa --url ${db.url}"/>
		</java>
	</target>
	
	<target name="build-tests" depends="build" description="Build the system">
		<javac
            srcdir="${test.dir}"
            destdir="${build.test.dir}"
            debug="true"
            debuglevel="lines,vars,source"
            encoding="utf-8"
            compiler="modern"
            target="1.5"
            source="1.5"
        	classpathref="libs"
        >
			<classpath>
				<pathelement path="${build.classes.dir}" />
			</classpath>
		</javac>
	</target>
	
	<target name="test" depends="build-tests" description="Run the template application">
			<junit>
				<classpath refid="test-classpath" />

				<formatter type="brief" usefile="false" />
				<batchtest>
					<fileset dir="${build.test.dir}" includes="**/*.class" />
				</batchtest>
			</junit>
		</target>
	
</project>